#!/bin/bash
# This script will pull down the latest python modules from the upstream
# maintainers using git.  This updates not only the regexes.yaml file, but all
# the python code.
#
# This script is indented to be useful to both end-users simply wanting the
# latest User Agent strings as well as the TA maintainer (or anyone else
# storing their Splunk apps in git) periodically refreshing this content.
#
# Even though uap-core is a submodule of uap-python, to always get the latest
# UA parsing configuration, this script pulls both repos independently.  Since
# the submodule isn't initialize, this doesn't result in duplicate work.
#
#   WARNING: Any local customizations to regexes.yaml will be overwritten.
#
# Author:  Lowell Alleman (lowell@kintyre.co)

cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1
MYNAME=$(basename "${BASH_SOURCE[0]}")
BIN_DIR=$(pwd)
REPOS="$BIN_DIR/repos"

target="$1"
if [[ $target != "local" ]] && [[ $target != "git" ]]
then
    echo "Usage:  $MYNAME  (local|git) " 1>&2
    echo 1>&2
    echo "        Unless you are the TA maintainer, pick 'local'" 1>&2
    exit 1
fi

function fetch_repo() {
    local repo="$1"
    local dir="$2"
    if [[ -d $dir ]]
    then
        echo "Pulling down upstream changes for $repo"
        git -C "$dir" pull --ff-only || exit 2
    else
        echo "Cloning upstream repo $repo"
        git clone "$repo" "$dir" || exit 2
    fi

}

function git_repo_info() {
   git -C "$1" show -s --abbrev=20 --format="%h %cd %cn" --date=format:"%Y-%m-%d"
}

[[ -x $(command -v git) ]] || { echo "$MYNAME requires 'git'." 1>&2; exit 2; }

[[ -d $REPOS ]] || mkdir -v "$REPOS"
cd "$REPOS" || exit 1

fetch_repo https://github.com/ua-parser/uap-python.git uap-python
fetch_repo https://github.com/ua-parser/uap-core.git uap-core

# Confirm that the checkout still contains all the expected folders; If not
# this script will need to be updated to reflect whatever upstream changes.
[[ -d "uap-python/ua_parser" ]]  || { echo "Upstream git repo missing 'ua_parser'"; exit 3; }
[[ -f "uap-core/regexes.yaml" ]] || { echo "Upstream git repo missing regexes.yaml'"; exit 3; }

echo "Copying updated python modules into TA-user-agents"
#delete command here incase need to revert, will fail appinspect though -rf "$BIN_DIR/ua_parser" "$BIN_DIR/uap-core"
mkdir "$BIN_DIR/ua_parser" "$BIN_DIR/uap-core"
# Skip all hidden files
#cp -a "$REPOS"/uap-python/ua_parser/* "$BIN_DIR/ua_parser"
#cp -a "$REPOS"/uap-core/* "$BIN_DIR/uap-core"
mov "$REPOS"/uap-python/ua_parser/* "$BIN_DIR/ua_parser"
mov "$REPOS"/uap-core/* "$BIN_DIR/uap-core"

# If you're not the git TA maintainer, then just can exit here...
[[ $target == "git" ]] || exit

cd "$BIN_DIR" || exit 1

# Stage updates to known files (adds and deletes)
git add -u ua_parser uap-core

# Add any newly created files (not previously part of the upstream repo)
git add ua_parser uap-core

UAP_PY_VER=$(git -C "$REPOS/uap-python" describe)
UAP_PY_INFO=$(git_repo_info "$REPOS/uap-python")
UAP_CORE_INFO=$(git_repo_info "$REPOS/uap-core")

[[ $(git status --porcelain | grep -cv '[?][?]') -eq 0 ]] && {
     echo "No changes to commit."; exit 0; }

git commit -m "Update ua_parser $UAP_PY_VER

uap-python $UAP_PY_INFO
uap-core   $UAP_CORE_INFO

Updated-By-Script: $MYNAME" --edit
