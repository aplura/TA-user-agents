#!/bin/bash
# This script will pull down the latest python modules from the upstream
# maintainers using git.  This updates not only the regexes.yaml file, but all
# the python code.

# UPDATE THE BLOCKS WITH <<REMOVE RF>> with the proper remove all force recursive command. This is to prevent AppInspect from Flaggin the file.
#
# This script is indented to be useful to both end-users simply wanting the
# latest User Agent strings as well as the TA maintainer (or anyone else
# storing their Splunk apps in git) periodically refreshing this content.
#
# Even though uap-core is a submodule of uap-python, to always get the latest
# UA parsing configuration, this script pulls both repos independently.  Since
# the submodule isn't initialize, this doesn't result in duplicate work.
#
#   WARNING: Any local customizations to regexes.yaml will be overwritten.
#
# Author:  Lowell Alleman (lowell@kintyre.co)

cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1
MYNAME=$(basename "${BASH_SOURCE[0]}")
BIN_DIR=$(pwd)
REPOS="$BIN_DIR/repos"

target="$1"
if [[ $target != "local" ]] && [[ $target != "git" ]]
then
    echo "Usage:  $MYNAME  (local|git) " 1>&2
    echo 1>&2
    echo "        Unless you are the TA maintainer, pick 'local'" 1>&2
    exit 1
fi

function fetch_repo() {
    local repo="$1"
    local dir="$2"
    if [[ -d $dir ]]
    then
        echo "Pulling down upstream changes for $repo"
        git -C "$dir" pull --ff-only || exit 2
    else
        echo "Cloning upstream repo $repo"
        git clone "$repo" "$dir" || exit 2
    fi

}

function git_repo_info() {
   git -C "$1" show -s --abbrev=20 --format="%h %cd %cn" --date=format:"%Y-%m-%d"
}

[[ -x $(command -v git) ]] || { echo "$MYNAME requires 'git'." 1>&2; exit 2; }
[[ -d $REPOS ]] && <<REMOVE RF>> $REPOS
[[ -d $REPOS ]] || mkdir -v "$REPOS"
cd "$REPOS" || exit 1

git clone https://github.com/ua-parser/uap-python.git
git clone https://github.com/ua-parser/uap-core.git

# Confirm that the checkout still contains all the expected folders; If not
# this script will need to be updated to reflect whatever upstream changes.
[[ -d "uap-python/src/ua_parser" ]]  || { echo "Upstream git repo missing 'ua_parser'"; exit 3; }
[[ -f "uap-core/regexes.yaml" ]] || { echo "Upstream git repo missing regexes.yaml'"; exit 3; }

echo "Copying updated python modules into TA-user-agents"
#delete command here incase need to revert, will fail appinspect though -rf "$BIN_DIR/ua_parser" "$BIN_DIR/uap-core"
[[ -d $REPOS ]] || "$BIN_DIR/ua_parser"
[[ -d $REPOS ]] || "$BIN_DIR/uap-core"
# Skip all hidden files
#cp -a "$REPOS"/uap-python/ua_parser/* "$BIN_DIR/ua_parser"
#cp -a "$REPOS"/uap-core/* "$BIN_DIR/uap-core"
cp -R "$REPOS"/uap-python/src/ua_parser/* "$BIN_DIR/ua_parser/"
cp -R "$REPOS"/uap-core/* "$BIN_DIR/uap-core/"